#Q1
import random

def objective_function(x):
    return -x**2 + 4*x  # f(x) = -x^2 + 4x

def hill_climbing(max_iterations, step_size):
    current_solution = random.uniform(-10, 10)  
    current_value = objective_function(current_solution)

    for _ in range(max_iterations):
        neighbor = current_solution + random.uniform(-step_size, step_size)
        neighbor_value = objective_function(neighbor)

        if neighbor_value > current_value:
            current_solution = neighbor
            current_value = neighbor_value

    return current_solution, current_value

if __name__ == "__main__":
    max_iterations = 1000 
    step_size = 0.1 

    final_solution, final_value = hill_climbing(max_iterations, step_size)
    print("Final Solution:", final_solution)
    print("Objective Value at Final Solution:", final_value)






#Q2
import heapq

graph = {
    'A': [('B', 9), ('C', 4),('D', 7)],
    'B': [('A', 9), ('E', 11)],
    'C': [('A', 4), ('E', 17), ('F', 12)],
    'D': [('A', 7), ('F', 14)],
    'E': [('B', 11), ('G', 5), ('C', 17)],
    'F': [('C', 12), ('D', 14), ('G', 9)],
    'G': [('E', 5), ('F', 9)]
}

heuristic = {'A': 21, 'B': 14, 'C': 18, 'D': 18, 'E': 5, 'F': 8, 'G': 0}

def a_star(start, goal):
    open_set = [(heuristic[start], start)]
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph}
    f_score[start] = heuristic[start]
    came_from = {}

    while open_set:
        _, current = heapq.heappop(open_set)
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1], f_score[goal]

        for neighbor, cost in graph[current]:
            tentative_g_score = g_score[current] + cost
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic[neighbor]
                heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return None, None 
path, cost = a_star('A', 'G')
if path:
    print(f"Path: {' -> '.join(path)}, Total cost: {cost}")
else:
    print("No path found")
