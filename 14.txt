#Q1
def sort_sentence_alphabetically(sentence):
    words = sentence.split()

    sorted_words = sorted(words)

    sorted_sentence = ' '.join(sorted_words)

    return sorted_sentence

input_sentence = input("Enter a sentence: ")

result = sort_sentence_alphabetically(input_sentence)

print("Sorted Sentence:", result)




#Q2
def print_board(board):
    """Function to print the chessboard."""
    for row in board:
        print(" ".join('Q' if col else '.' for col in row))
    print("\n")

def is_safe(board, row, col, n):
    """Check if it's safe to place a queen at (row, col)."""
    for i in range(row):
        if board[i][col]:
            return False
    
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j]:
            return False
    
    for i, j in zip(range(row-1, -1, -1), range(col+1, n)):
        if board[i][j]:
            return False 
    return True

def solve_n_queens(board, row, n):
    """Backtracking function to solve the N-Queens problem."""
    if row == n:
        print_board(board)
        return True
    
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = True 
            if solve_n_queens(board, row + 1, n): 
                return True
            board[row][col] = False  

    return False 

def n_queens(n):
    """Main function to initialize the board and start solving the N-Queens problem."""
    board = [[False for _ in range(n)] for _ in range(n)]  
    if not solve_n_queens(board, 0, n):
        print("No solution exists.")
    else:
        print("Solution found!")

n = int(input("Enter the value of N (N-Queens): "))
n_queens(n)
