#Q1
import heapq

GOAL = (1, 2, 3, 4, 5, 6, 7, 8, 0)

def manhattan(state):
    return sum(abs((state.index(i) // 3 - GOAL.index(i) // 3) + (state.index(i) % 3 - GOAL.index(i) % 3)) for i in range(1, 9))

def successors(state):
    moves = []
    idx = state.index(0)
    row, col = idx // 3, idx % 3
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    for dr, dc in directions:
        new_row, new_col = row + dr, col + dc
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_idx = new_row * 3 + new_col
            new_state = list(state)
            new_state[idx], new_state[new_idx] = new_state[new_idx], new_state[idx]
            moves.append(tuple(new_state))
    return moves

def a_star(start):
    open_list = [(manhattan(start), 0, start)]
    closed = set()
    while open_list:
        _, g, state = heapq.heappop(open_list)
        if state == GOAL:
            return g 
        closed.add(state)
        for succ in successors(state):
            if succ not in closed:
                heapq.heappush(open_list, (g + 1 + manhattan(succ), g + 1, succ))
    return None
def main():
    start_state = tuple(map(int, input("Enter the initial state (9 numbers with space, 0 for empty): ").split()))
    result = a_star(start_state)
    if result is not None:
        print(f"Solution found in {result} moves!")
    else:
        print("No solution found.")
if __name__ == "__main__":
    main()



#Q2
from collections import deque

def bfs(capacity1, capacity2, target):
    initial_state = (0, 0)
    
    queue = deque([(initial_state, [])])
    
    visited = set()
    visited.add(initial_state)
    
    while queue:
        (x, y), path = queue.popleft()
        
        if y == target:
            return path
        
        possible_moves = [
            (capacity1, y),
            (x, capacity2), 
            (0, y),           
            (x, 0),       
            (x - min(x, capacity2 - y), y + min(x, capacity2 - y)),
            (x + min(y, capacity1 - x), y - min(y, capacity1 - x))   
        ]
    
        for state in possible_moves:
            if state not in visited:
                visited.add(state)
                queue.append((state, path + [state]))
    
    return None

def main():
    capacity1 = 5 
    capacity2 = 7
    target = 4  
    solution = bfs(capacity1, capacity2, target)
    
    if solution:
        print("Steps to achieve the goal:")
        for step in solution:
            print(f"Jug 1: {step[0]} gallons, Jug 2: {step[1]} gallons")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
