#Q1
import random
word_list = ['python', 'computer', 'science', 'algorithm', 'function']

def display_word(word, guessed_letters):
    display = ""
    for letter in word:
        if letter in guessed_letters:
            display += letter
        else:
            display += "_"
    return display
def hangman_game():
    word = random.choice(word_list)
    guessed_letters = [] 
    wrong_guesses = 0 
    max_wrong_guesses = 6 
    
    print("Welcome to Hangman!")

    while wrong_guesses < max_wrong_guesses:
        print(f"\nWord: {display_word(word, guessed_letters)}")
        print(f"Wrong guesses left: {max_wrong_guesses - wrong_guesses}")
        
        guess = input("Enter a letter: ").lower()
        
        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a valid single letter.")
            continue
        
        if guess in guessed_letters:
            print("You already guessed that letter!")
            continue
        
        guessed_letters.append(guess)
        
        if guess in word:
            print(f"Good guess! {guess} is in the word.")
        else:
            print(f"Sorry! {guess} is not in the word.")
            wrong_guesses += 1
        
        if all(letter in guessed_letters for letter in word):
            print(f"\nCongratulations! You guessed the word '{word}' correctly!")
            break
    else:
        print(f"\nGame over! The word was '{word}'.")
        
if __name__ == "__main__":
    hangman_game()






#Q2
import heapq

class Node:
    def __init__(self, name, g=0, h=0, parent=None):
        self.name = name 
        self.g = g  
        self.h = h  
        self.f = g + h 
        self.parent = parent  

    def __lt__(self, other):
        return self.f < other.f 

def a_star(graph, heuristics, start, goal):
    open_list = [] 
    closed_list = set() 

    start_node = Node(start, g=0, h=heuristics[start])
    heapq.heappush(open_list, start_node)

    while open_list:
    
        current_node = heapq.heappop(open_list)

        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1] 

        closed_list.add(current_node.name)

        for neighbor, cost in graph[current_node.name]:
            if neighbor in closed_list:
                continue

            g = current_node.g + cost  
            h = heuristics[neighbor]  
            neighbor_node = Node(neighbor, g=g, h=h, parent=current_node)

            if not any(neighbor_node.name == n.name and neighbor_node.f >= n.f for n in open_list):
                heapq.heappush(open_list, neighbor_node)

    return None  

graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('A', 1), ('C', 2), ('D', 5)],
    'C': [('A', 4), ('B', 2), ('D', 1)],
    'D': [('B', 5), ('C', 1), ('E', 2), ('G', 2)],
    'E': [('D', 2), ('G', 5)],
    'F': [],
    'G': []
}

heuristics = {
    'A': 7,
    'B': 6,
    'C': 2,
    'D': 1,
    'E': 4,
    'F': 999, 
    'G': 0  
}

if __name__ == "__main__":
    start = 'A'
    goal = 'G'

    path = a_star(graph, heuristics, start, goal)

    if path:
        print("Path found:", " -> ".join(path))
    else:
        print("No path found.")
